"""
Report templates for different output formats.

This module provides template classes for generating HTML, PDF, and JSON
reports with consistent formatting and comprehensive content.
"""

import json
from typing import Dict, Any, List
from datetime import datetime
from abc import ABC, abstractmethod

from ..models.evaluation import EvaluationReport, Finding, Severity, Grade


class BaseTemplate(ABC):
    """Base class for all report templates."""
    
    @abstractmethod
    def render(self, data: Dict[str, Any]) -> Any:
        """
        Render the template with the provided data.
        
        Args:
            data: Enhanced report data dictionary
            
        Returns:
            Rendered content in the appropriate format
        """
        pass


class HTMLTemplate(BaseTemplate):
    """HTML report template with detailed findings and recommendations."""
    
    def render(self, data: Dict[str, Any]) -> str:
        """
        Render HTML report template.
        
        Args:
            data: Enhanced report data dictionary
            
        Returns:
            HTML content as string
        """
        report = data['report']
        executive_summary = data.get('executive_summary')
        findings_by_severity = data['findings_by_severity']
        metrics = data['metrics']
        
        html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Linux Driver Evaluation Report - {report.evaluation_id}</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1>Linux Driver Evaluation Report</h1>
            <div class="report-meta">
                <p><strong>Evaluation ID:</strong> {report.evaluation_id}</p>
                <p><strong>Generated:</strong> {data['generation_timestamp']}</p>
                <p><strong>Overall Score:</strong> <span class="score grade-{report.grade.value.lower()}">{report.overall_score:.1f}/100</span></p>
                <p><strong>Grade:</strong> <span class="grade grade-{report.grade.value.lower()}">{report.grade.value}</span></p>
            </div>
        </header>

        {self._render_executive_summary(executive_summary) if executive_summary else ''}
        
        {self._render_score_breakdown(report)}
        
        {self._render_summary_statistics(report.summary, metrics)}
        
        {self._render_findings_overview(findings_by_severity)}
        
        {self._render_detailed_findings(report.detailed_findings)}
        
        {self._render_recommendations(report.recommendations, data.get('improvement_priority', []))}
        
        <footer class="report-footer">
            <p>Generated by Linux Driver Evaluation Framework</p>
            <p>Report generated on {data['generation_timestamp']}</p>
        </footer>
    </div>
</body>
</html>
        """
        
        return html_content.strip()
    
    def _get_css_styles(self) -> str:
        """Get CSS styles for the HTML report."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        
        .report-header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
        }
        
        .report-header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .report-meta {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 20px;
        }
        
        .score {
            font-size: 1.2em;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
        }
        
        .grade {
            font-size: 1.2em;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 5px;
        }
        
        .grade-a { background-color: #4CAF50; color: white; }
        .grade-b { background-color: #8BC34A; color: white; }
        .grade-c { background-color: #FFC107; color: black; }
        .grade-d { background-color: #FF9800; color: white; }
        .grade-f { background-color: #F44336; color: white; }
        
        .section {
            margin: 30px 0;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fafafa;
        }
        
        .section h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }
        
        .score-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .score-item {
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .score-item h3 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        
        .score-value {
            font-size: 2em;
            font-weight: bold;
            color: #3498db;
        }
        
        .findings-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin: 20px 0;
        }
        
        .severity-item {
            text-align: center;
            padding: 10px;
            border-radius: 5px;
            color: white;
        }
        
        .severity-critical { background-color: #e74c3c; }
        .severity-high { background-color: #e67e22; }
        .severity-medium { background-color: #f39c12; }
        .severity-low { background-color: #f1c40f; color: black; }
        .severity-info { background-color: #3498db; }
        
        .finding {
            margin: 15px 0;
            padding: 15px;
            border-left: 4px solid #3498db;
            background: white;
            border-radius: 0 5px 5px 0;
        }
        
        .finding-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .finding-type {
            font-weight: bold;
            color: #2c3e50;
        }
        
        .finding-location {
            font-family: monospace;
            background: #ecf0f1;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.9em;
        }
        
        .finding-message {
            margin: 10px 0;
            line-height: 1.5;
        }
        
        .finding-recommendation {
            background: #e8f5e8;
            padding: 10px;
            border-radius: 5px;
            border-left: 3px solid #27ae60;
            margin-top: 10px;
        }
        
        .recommendations-list {
            list-style: none;
        }
        
        .recommendations-list li {
            margin: 10px 0;
            padding: 10px;
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            border-radius: 0 5px 5px 0;
        }
        
        .report-footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            border-top: 1px solid #ddd;
            color: #666;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        
        .metric-value {
            font-weight: bold;
            color: #2c3e50;
        }
        """
    
    def _render_executive_summary(self, executive_summary: Dict[str, Any]) -> str:
        """Render executive summary section."""
        return f"""
        <section class="section">
            <h2>Executive Summary</h2>
            <div class="executive-content">
                <p><strong>Overall Assessment:</strong> {executive_summary.get('overall_assessment', '')}</p>
                <p><strong>Key Strengths:</strong></p>
                <ul>
                    {''.join(f'<li>{strength}</li>' for strength in executive_summary.get('key_strengths', []))}
                </ul>
                <p><strong>Critical Issues:</strong></p>
                <ul>
                    {''.join(f'<li>{issue}</li>' for issue in executive_summary.get('critical_issues', []))}
                </ul>
                <p><strong>Recommendation:</strong> {executive_summary.get('recommendation', '')}</p>
            </div>
        </section>
        """
    
    def _render_score_breakdown(self, report: EvaluationReport) -> str:
        """Render score breakdown section."""
        scores = report.dimension_scores
        return f"""
        <section class="section">
            <h2>Score Breakdown</h2>
            <div class="score-grid">
                <div class="score-item">
                    <h3>Correctness</h3>
                    <div class="score-value">{scores.correctness:.1f}</div>
                    <p>40% weight</p>
                </div>
                <div class="score-item">
                    <h3>Security</h3>
                    <div class="score-value">{scores.security:.1f}</div>
                    <p>25% weight</p>
                </div>
                <div class="score-item">
                    <h3>Code Quality</h3>
                    <div class="score-value">{scores.code_quality:.1f}</div>
                    <p>20% weight</p>
                </div>
                <div class="score-item">
                    <h3>Performance</h3>
                    <div class="score-value">{scores.performance:.1f}</div>
                    <p>10% weight</p>
                </div>
                <div class="score-item">
                    <h3>Advanced Features</h3>
                    <div class="score-value">{scores.advanced_features:.1f}</div>
                    <p>5% weight</p>
                </div>
            </div>
        </section>
        """
    
    def _render_summary_statistics(self, summary, metrics: Dict[str, Any]) -> str:
        """Render summary statistics section."""
        return f"""
        <section class="section">
            <h2>Summary Statistics</h2>
            <table>
                <tr>
                    <th>Metric</th>
                    <th>Value</th>
                </tr>
                <tr>
                    <td>Total Issues</td>
                    <td class="metric-value">{summary.total_issues}</td>
                </tr>
                <tr>
                    <td>Critical Issues</td>
                    <td class="metric-value">{summary.critical_issues}</td>
                </tr>
                <tr>
                    <td>Compilation Status</td>
                    <td class="metric-value">{'✓ Success' if summary.compilation_status else '✗ Failed'}</td>
                </tr>
                <tr>
                    <td>Files Analyzed</td>
                    <td class="metric-value">{metrics.get('total_files_analyzed', 0)}</td>
                </tr>
                <tr>
                    <td>Average Issues per File</td>
                    <td class="metric-value">{metrics.get('avg_issues_per_file', 0):.1f}</td>
                </tr>
            </table>
        </section>
        """
    
    def _render_findings_overview(self, findings_by_severity: Dict[str, List[Finding]]) -> str:
        """Render findings overview section."""
        severity_html = ""
        for severity in ['critical', 'high', 'medium', 'low', 'info']:
            count = len(findings_by_severity.get(severity, []))
            severity_html += f"""
            <div class="severity-item severity-{severity}">
                <div style="font-size: 1.5em; font-weight: bold;">{count}</div>
                <div>{severity.title()}</div>
            </div>
            """
        
        return f"""
        <section class="section">
            <h2>Findings Overview</h2>
            <div class="findings-summary">
                {severity_html}
            </div>
        </section>
        """
    
    def _render_detailed_findings(self, findings: List[Finding]) -> str:
        """Render detailed findings section."""
        if not findings:
            return """
            <section class="section">
                <h2>Detailed Findings</h2>
                <p>No issues found in the analyzed code.</p>
            </section>
            """
        
        findings_html = ""
        for finding in findings:
            recommendation_html = ""
            if finding.recommendation:
                recommendation_html = f"""
                <div class="finding-recommendation">
                    <strong>Recommendation:</strong> {finding.recommendation}
                </div>
                """
            
            findings_html += f"""
            <div class="finding">
                <div class="finding-header">
                    <span class="finding-type">{finding.type}</span>
                    <span class="severity-item severity-{finding.severity.value}">{finding.severity.value.upper()}</span>
                </div>
                <div class="finding-location">{finding.file}:{finding.line}:{finding.column}</div>
                <div class="finding-message">{finding.message}</div>
                {recommendation_html}
            </div>
            """
        
        return f"""
        <section class="section">
            <h2>Detailed Findings</h2>
            {findings_html}
        </section>
        """
    
    def _render_recommendations(self, recommendations: List[str], improvement_priority: List[str]) -> str:
        """Render recommendations section."""
        recommendations_html = ''.join(f'<li>{rec}</li>' for rec in recommendations)
        priority_html = ''.join(f'<li>{priority}</li>' for priority in improvement_priority)
        
        return f"""
        <section class="section">
            <h2>Recommendations</h2>
            <h3>General Recommendations</h3>
            <ul class="recommendations-list">
                {recommendations_html}
            </ul>
            <h3>Improvement Priorities</h3>
            <ul class="recommendations-list">
                {priority_html}
            </ul>
        </section>
        """


class PDFTemplate(BaseTemplate):
    """PDF report template using HTML to PDF conversion."""
    
    def render(self, data: Dict[str, Any]) -> bytes:
        """
        Render PDF report template.
        
        Args:
            data: Enhanced report data dictionary
            
        Returns:
            PDF content as bytes
        """
        # For now, we'll create a simplified PDF using HTML template
        # In a production environment, you would use libraries like:
        # - weasyprint
        # - reportlab
        # - pdfkit
        
        html_template = HTMLTemplate()
        html_content = html_template.render(data)
        
        # This is a placeholder - in real implementation, convert HTML to PDF
        # For now, return HTML content as bytes for demonstration
        return html_content.encode('utf-8')


class JSONTemplate(BaseTemplate):
    """JSON report template for API responses and programmatic access."""
    
    def render(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Render JSON report template.
        
        Args:
            data: Enhanced report data dictionary
            
        Returns:
            JSON-serializable dictionary
        """
        report = data['report']
        
        return {
            'evaluation_id': report.evaluation_id,
            'timestamp': data['generation_timestamp'],
            'overall_score': report.overall_score,
            'grade': report.grade.value,
            'grade_description': data.get('grade_description', ''),
            'dimension_scores': report.dimension_scores.to_dict(),
            'summary': report.summary.to_dict(),
            'detailed_findings': [finding.to_dict() for finding in report.detailed_findings],
            'recommendations': report.recommendations,
            'improvement_priority': data.get('improvement_priority', []),
            'metrics': data['metrics'],
            'findings_by_severity': {
                severity: [finding.to_dict() for finding in findings]
                for severity, findings in data['findings_by_severity'].items()
            },
            'findings_by_type': {
                finding_type: [finding.to_dict() for finding in findings]
                for finding_type, findings in data['findings_by_type'].items()
            },
            'executive_summary': data.get('executive_summary')
        }
    
    def format_api_response(self, evaluation_report: EvaluationReport) -> Dict[str, Any]:
        """
        Format evaluation report for API response.
        
        Args:
            evaluation_report: The evaluation report data
            
        Returns:
            API-formatted response dictionary
        """
        return {
            'status': 'success',
            'data': {
                'evaluation_id': evaluation_report.evaluation_id,
                'overall_score': evaluation_report.overall_score,
                'grade': evaluation_report.grade.value,
                'dimension_scores': evaluation_report.dimension_scores.to_dict(),
                'summary': {
                    'total_issues': evaluation_report.summary.total_issues,
                    'critical_issues': evaluation_report.summary.critical_issues,
                    'compilation_status': evaluation_report.summary.compilation_status
                },
                'findings_count': len(evaluation_report.detailed_findings),
                'recommendations_count': len(evaluation_report.recommendations)
            },
            'links': {
                'detailed_report': f'/api/reports/{evaluation_report.evaluation_id}/detailed',
                'download_html': f'/api/reports/{evaluation_report.evaluation_id}/download/html',
                'download_pdf': f'/api/reports/{evaluation_report.evaluation_id}/download/pdf'
            },
            'timestamp': datetime.now().isoformat()
        }